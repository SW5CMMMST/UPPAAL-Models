<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
int n = 0;                    // Number of Timeslots connected
int i = 0;                    // Current time slot in the frame
const int Delta = 80;                 //Timeslot Length
const int Delta_Proc = Delta/2;
const int Real_Transmit_Time = Delta/3;
const int Initial_Wait_Time = Delta*3;
int Startup_Time = Initial_Wait_Time*2;
clock startup;

//Channel
broadcast chan transmit;

//Device Creation
const int N = 4;
typedef int[1,N] id_t;</declaration>
	<template>
		<name x="5" y="5">Device</name>
		<parameter>const id_t id</parameter>
		<declaration>// Place local declarations here.
clock x;
clock transmit_time;
int k = -1;                     //Timeslot
bool Connected = false;

// Local copies of globals
int local_n = 0;                // Number of devices connected
int local_i = 0;               // Current time slot in the frame

void increment_Slot(){
local_i = (local_i % local_n)+1;
x:=0;
}

void receive()
{
local_i = i;
local_n = n;
}

void join_Network(){
k=n;
i = 1;
local_i = 1;
n = n+1;
local_n = local_n+1;
}

void create_Network(){
i = 1;
n = 2;
k = 1;
local_i = 1;
local_n = 2;
}

void make_Payload(){
i = local_i;
n = local_n;
}




</declaration>
		<location id="id0" x="238" y="467">
			<name x="255" y="442">Main_Loop</name>
			<committed/>
		</location>
		<location id="id1" x="510" y="731">
			<name x="484" y="739">Receving</name>
			<label kind="invariant" x="484" y="756">x &lt;= Delta</label>
		</location>
		<location id="id2" x="-42" y="731">
			<name x="-85" y="739">Transmitting</name>
			<label kind="invariant" x="-178" y="757">transmit_time&lt;=Real_Transmit_Time</label>
		</location>
		<location id="id3" x="238" y="731">
			<name x="212" y="748">Tx_Or_Rx</name>
			<committed/>
		</location>
		<location id="id4" x="238" y="578">
			<name x="144" y="578">User_Code</name>
			<label kind="invariant" x="118" y="561">x &lt;= Delta_Proc</label>
		</location>
		<location id="id5" x="-68" y="204">
			<name x="-195" y="178">Creating_Network</name>
			<label kind="invariant" x="-323" y="195">transmit_time&lt;=Real_Transmit_Time</label>
		</location>
		<location id="id6" x="238" y="204">
			<name x="255" y="178">Transmitting_Not_Connected</name>
			<label kind="invariant" x="255" y="195">transmit_time&lt;=Real_Transmit_Time</label>
		</location>
		<location id="id7" x="238" y="-68">
			<name x="161" y="-102">User_Code_Not_Connected</name>
			<label kind="invariant" x="186" y="-119">x &lt;= Delta_Proc</label>
		</location>
		<location id="id8" x="459" y="43">
			<name x="476" y="34">Receiving_Not_Connected</name>
		</location>
		<location id="id9" x="238" y="374">
			<name x="263" y="365">Connected_To_Network</name>
			<committed/>
		</location>
		<location id="id10" x="238" y="42">
			<name x="195" y="0">Network_Found</name>
			<committed/>
		</location>
		<location id="id11" x="-68" y="42">
			<name x="-212" y="25">Listen_For_Network</name>
			<label kind="invariant" x="-229" y="42">x &lt;= Initial_Wait_Time</label>
		</location>
		<location id="id12" x="-68" y="-68">
			<name x="-93" y="-102">Initialize</name>
			<label kind="invariant" x="-161" y="-119">startup&lt;= Startup_Time</label>
		</location>
		<init ref="id12"/>
		<transition>
			<source ref="id0"/>
			<target ref="id4"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="374" y="561">x == Delta</label>
			<label kind="assignment" x="374" y="578">x:= 0</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="518" y="561">transmit?</label>
			<label kind="assignment" x="518" y="578">receive(),
x:=0</label>
			<nail x="510" y="467"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="-289" y="578">transmit_time==Real_Transmit_Time</label>
			<label kind="synchronisation" x="-119" y="595">transmit!</label>
			<label kind="assignment" x="-161" y="612">make_Payload()</label>
			<nail x="-42" y="467"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id0"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="340" y="731">local_i != k</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="85" y="731">local_i == k</label>
			<label kind="assignment" x="85" y="748">transmit_time:=0</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="guard" x="136" y="629">x==Delta_Proc</label>
			<label kind="assignment" x="127" y="646">increment_Slot()</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id9"/>
			<label kind="guard" x="246" y="246">transmit_time == Real_Transmit_Time</label>
			<label kind="synchronisation" x="246" y="229">transmit!</label>
			<label kind="assignment" x="246" y="272">join_Network(),
Connected = true,
x:=0</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id9"/>
			<label kind="guard" x="-314" y="254">transmit_time==Real_Transmit_Time</label>
			<label kind="synchronisation" x="-136" y="238">transmit!</label>
			<label kind="assignment" x="-195" y="272">create_Network(),
x:= 0,
Connected = true</label>
			<nail x="-68" y="340"/>
			<nail x="-68" y="374"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id5"/>
			<label kind="guard" x="-221" y="119">x == Initial_Wait_Time</label>
			<label kind="assignment" x="-187" y="102">transmit_time:=0</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id6"/>
			<label kind="guard" x="246" y="85">local_i == local_n
and x == Delta_Proc</label>
			<label kind="assignment" x="246" y="119">transmit_time:=0</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id10"/>
			<label kind="guard" x="59" y="-42">x == Delta_Proc</label>
			<nail x="170" y="-68"/>
			<nail x="170" y="17"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id7"/>
			<label kind="guard" x="323" y="-43">x ==0</label>
			<nail x="314" y="17"/>
			<nail x="314" y="-68"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="476" y="60">transmit?</label>
			<label kind="assignment" x="476" y="77">receive(),
increment_Slot()</label>
			<nail x="459" y="77"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id8"/>
			<label kind="guard" x="476" y="-24">x == Delta_Proc
and local_i != local_n</label>
			<nail x="459" y="1"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="42" y="8">transmit?</label>
			<label kind="assignment" x="42" y="25">receive(),
increment_Slot()</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id11"/>
			<label kind="guard" x="-229" y="-51">startup == Startup_Time</label>
			<label kind="assignment" x="-144" y="-34">startup:= 0,
x:= 0</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
// List one or more processes to be composed into a system.
system Device;
    </system>
	<queries>
		<query>
			<formula>A&lt;&gt; forall(i: id_t) Device(i).Connected
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] not deadlock
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] forall(i : id_t) forall(j : id_t)  Device(i).Transmitting and Device(j).Transmitting imply i == j
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A&lt;&gt; forall(i : id_t) forall(j : id_t) (Device(i).User_Code and Device(j).User_Code and Device(i).local_i == Device(j).local_i)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A&lt;&gt; forall(i : id_t) forall(j : id_t) Device(i).local_n == Device(j).local_n
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A&lt;&gt; forall(i : id_t) forall(j :id_t) Device(i).k != Device(j).local_n
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A&lt;&gt; forall(i : id_t)  Device(i).k &lt; n and Device(i).k &gt; 0
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A&lt;&gt; n == N+1
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A&lt;&gt; forall(i : id_t) forall(j : id_t) Device(i).k == Device(j).k imply i == j
			</formula>
			<comment>If they have the same k, it will be the same device.
			</comment>
		</query>
	</queries>
</nta>
