<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
int n = 0;                    // Number of Timeslots connected
int i = 0;                    // Current time slot in the frame
const int Delta = 80;                 //Timeslot Length
const int Delta_Com = Delta/2;
const int Real_Transmit_Time = Delta/3;
int Initial_Wait_Time = Delta*3;
clock startup;

//Channel
broadcast chan transmit;

//Device Creation
const int N = 3;
typedef int[1,N] id_t;</declaration>
	<template>
		<name x="5" y="5">Device</name>
		<parameter>const id_t id</parameter>
		<declaration>// Place local declarations here.
clock x;
clock transmit_time;
int k = -1;                     //Timeslot
bool Connected = false;

// Local copies of globals
int local_n = 0;                // Number of devices connected
int local_i = 0;               // Current time slot in the frame

void increment_Slot(){
local_i = (local_i % local_n)+1;
x:=0;
}

void receive()
{
local_i = i;
local_n = n;
increment_Slot();
}

void join_Network(){
k=n;
i = 1;
local_i = 1;
n = n+1;
local_n = local_n+1;
}

void create_Network(){
i = 1;
n = 2;
k = 1;
local_i = 1;
local_n = 2;
}

void make_Payload(){
i = local_i;
n = local_n;
}




</declaration>
		<location id="id0" x="-68" y="204">
			<name x="-195" y="178">Creating_Network</name>
			<label kind="invariant" x="-323" y="195">transmit_time&lt;=Real_Transmit_Time</label>
		</location>
		<location id="id1" x="238" y="204">
			<name x="255" y="178">Transmitting_Not_Connected</name>
			<label kind="invariant" x="255" y="204">transmit_time&lt;=Real_Transmit_Time</label>
		</location>
		<location id="id2" x="238" y="-68">
			<name x="161" y="-102">User_Code_Not_Connected</name>
			<label kind="invariant" x="186" y="-119">x &lt;= Delta_Com</label>
		</location>
		<location id="id3" x="459" y="43">
			<name x="476" y="34">Receiving_Not_Connected</name>
		</location>
		<location id="id4" x="238" y="680">
			<name x="204" y="688">Transmitting</name>
			<label kind="invariant" x="144" y="705">transmit_time&lt;=Real_Transmit_Time</label>
		</location>
		<location id="id5" x="34" y="484">
			<name x="-8" y="501">User_Code</name>
			<label kind="invariant" x="-76" y="416">x &lt;= Delta_Com</label>
		</location>
		<location id="id6" x="561" y="416">
			<name x="578" y="390">Receiving</name>
			<label kind="invariant" x="578" y="416">x &lt;= Delta</label>
		</location>
		<location id="id7" x="238" y="374">
			<name x="59" y="365">Connected_To_Network</name>
			<committed/>
		</location>
		<location id="id8" x="238" y="42">
			<name x="195" y="0">Network_Found</name>
			<committed/>
		</location>
		<location id="id9" x="-68" y="42">
			<name x="-212" y="25">Listen_For_Network</name>
			<label kind="invariant" x="-229" y="42">x &lt;= Initial_Wait_Time</label>
		</location>
		<location id="id10" x="-68" y="-68">
			<name x="-93" y="-102">Initialize</name>
			<label kind="invariant" x="-145" y="-119">startup&lt;= Initial_Wait_Time</label>
		</location>
		<init ref="id10"/>
		<transition>
			<source ref="id1"/>
			<target ref="id7"/>
			<label kind="guard" x="246" y="246">transmit_time == Real_Transmit_Time</label>
			<label kind="synchronisation" x="246" y="229">transmit!</label>
			<label kind="assignment" x="246" y="272">join_Network(),
Connected = true,
x:=0</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id7"/>
			<label kind="guard" x="-314" y="254">transmit_time==Real_Transmit_Time</label>
			<label kind="synchronisation" x="-136" y="238">transmit!</label>
			<label kind="assignment" x="-195" y="272">create_Network(),
x:= 0,
Connected = true</label>
			<nail x="-68" y="340"/>
			<nail x="-68" y="348"/>
			<nail x="204" y="348"/>
			<nail x="212" y="357"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id7"/>
			<label kind="guard" x="289" y="561">transmit_time==Real_Transmit_Time</label>
			<label kind="synchronisation" x="289" y="544">transmit!</label>
			<label kind="assignment" x="289" y="578">make_Payload(),
increment_Slot()</label>
			<nail x="272" y="595"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id0"/>
			<label kind="guard" x="-221" y="119">x == Initial_Wait_Time</label>
			<label kind="assignment" x="-187" y="102">transmit_time:=0</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id1"/>
			<label kind="guard" x="255" y="76">local_i == local_n
and x == Delta_Com</label>
			<label kind="assignment" x="255" y="110">transmit_time:=0</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id8"/>
			<label kind="guard" x="59" y="-42">x == Delta_Com</label>
			<nail x="170" y="-68"/>
			<nail x="170" y="17"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id2"/>
			<label kind="guard" x="323" y="-43">x ==0</label>
			<nail x="314" y="17"/>
			<nail x="314" y="-68"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="476" y="60">transmit?</label>
			<label kind="assignment" x="476" y="77">receive()</label>
			<nail x="459" y="77"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id3"/>
			<label kind="guard" x="476" y="-24">x == Delta_Com
and local_i != local_n</label>
			<nail x="459" y="1"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="578" y="467">x == Delta</label>
			<label kind="assignment" x="578" y="484">increment_Slot()</label>
			<nail x="561" y="476"/>
			<nail x="340" y="476"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id4"/>
			<label kind="guard" x="59" y="552">local_i == k
and x == Delta_Com</label>
			<label kind="assignment" x="59" y="586">transmit_time:=0</label>
			<nail x="204" y="595"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="365" y="391">transmit?</label>
			<label kind="assignment" x="365" y="416">receive()</label>
			<nail x="340" y="416"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id7"/>
			<label kind="guard" x="76" y="459">x == Delta_Com</label>
			<nail x="187" y="484"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id5"/>
			<label kind="guard" x="-8" y="399">x == 0</label>
			<nail x="187" y="399"/>
			<nail x="34" y="399"/>
			<nail x="34" y="416"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="guard" x="357" y="323">local_i != k 
and x == Delta_Com</label>
			<nail x="561" y="374"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="42" y="8">transmit?</label>
			<label kind="assignment" x="42" y="25">receive()</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="guard" x="-255" y="-42">startup == Initial_Wait_Time</label>
			<label kind="assignment" x="-144" y="-25">startup:= 0,
x:= 0</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
// List one or more processes to be composed into a system.
system Device;
    </system>
	<queries>
		<query>
			<formula>A&lt;&gt; forall(i: id_t) Device(i).Connected
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] not deadlock
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] not(Device(1).Transmitting &amp;&amp; Device(2).Transmitting &amp;&amp; Device(3).Transmitting)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A&lt;&gt; forall(i : id_t) forall(j : id_t) (Device(i).User_Code and Device(j).User_Code and Device(i).local_i == Device(j).local_i)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A&lt;&gt; forall(i : id_t) forall(j : id_t) Device(i).local_n == Device(j).local_n
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A&lt;&gt; forall(i : id_t) forall(j :id_t) Device(i).k != Device(j).local_n
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A&lt;&gt; forall(i : id_t) forall(j : id_t) Device(i).k == Device(j).k imply i == j
			</formula>
			<comment>If they have the same k, it will be the same device.
			</comment>
		</query>
	</queries>
</nta>
