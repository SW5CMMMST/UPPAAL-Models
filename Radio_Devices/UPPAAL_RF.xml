<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
clock now;
const int N = 6;
const int S = 20;
broadcast chan tx;
typedef int[0,N-1] id_t;</declaration>
	<template>
		<name x="5" y="5">Device</name>
		<parameter>const id_t id</parameter>
		<declaration>// Place local declarations here.
int i;
clock x;</declaration>
		<location id="id0" x="110" y="-170">
			<name x="127" y="-187">Reconfigure_Frame</name>
		</location>
		<location id="id1" x="-110" y="-170">
			<name x="-120" y="-204">Idle</name>
			<label kind="invariant" x="-178" y="-187">x &lt;= S</label>
		</location>
		<location id="id2" x="-34" y="161">
			<name x="-136" y="152">Transmitting</name>
		</location>
		<location id="id3" x="110" y="-85">
			<name x="136" y="-93">Receiving</name>
		</location>
		<location id="id4" x="59" y="34">
			<name x="76" y="8">Tx_Or_Rx</name>
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="guard" x="34" y="93">(i % (N-1)) == id</label>
			<label kind="synchronisation" x="34" y="76">tx!</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id0"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="guard" x="-92" y="-102">x == S</label>
			<label kind="assignment" x="-8" y="-85">i++, x:=0</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id1"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="guard" x="119" y="-51">(i % (N-1) )!= id</label>
			<label kind="synchronisation" x="119" y="-34">tx?</label>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Device;
    </system>
	<queries>
		<query>
			<formula>A[] forall (a : id_t) forall (b : id_t)  (Device(a).Transmitting &amp;&amp; Device(b).Transmitting)
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
